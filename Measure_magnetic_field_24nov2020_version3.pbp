' Name        : Measure_magnetic_field_24Nov2020_version3.pbp
' Programmer  : Louis-Philippe Carignan
' Date        : 24 November 2020
' Version     : 3
' Compiler    : PICBASIC PRO Compiler 2.6
' Assembler   : PM or MPASM
' Target PIC  : 16F887 or similar
' Hardware    : Non specific
' Oscillator  : external 4 MHz
' Keywords    : DAC
' Description : The following program generates an output voltage to control a 
' power supply. The voltage ramp is generated by a 12 bit digital to analog converter (DAC)
' Microchip MCP4921 by sending to it serial bits. The analog voltage received
' by the power supply will be used to generate a current, and eventually generate a 
' magnetic field.

' The desired output voltage is obtained from a program using an RS232 serial protocol.
' Port A1 is used as the serial input port (from PC) and Port A2 is used as the output serial port (to the PC).
' Port A0, A3, A4, A5, A6 and A7 measure the analog input voltage from the power supply
' and temperature sensors.
' 
' Port B0, B2 and B7 are used to light LEDs, to verify if we receive data and if
' we send data. B4 is set to high. It is used to control the overpotential of the 
' power supply. A knob is used for controling the overpotential.

' Port C0, C3 and C5 are used to communicate with the MCP4921 DAC. 
     
' define external quartz oscillator frequency at 4 MHz 
 define OSC 4
' settings of the LCD screen
 DEFINE LCD_DREG PORTD
 DEFINE LCD_DBIT 0
 DEFINE LCD_RSREG PORTD
 DEFINE LCD_RSBIT 5
 DEFINE LCD_EREG PORTD
 DEFINE LCD_EBIT 4
 DEFINE LCD_BITS 4
 DEFINE LCD_LINES 2
 DEFINE LCD_COMMANDUS 2000
 DEFINE LCD_DATAUS 150
 Define ADC_BITS     10 ' Set number of bits in result
Define ADC_SAMPLEUS 50 ' Set sampling time in uS

include "modedefs.bas"

' analog and digital settings of the micro-controller ports 
ADCON0 = %11000001     ' Set ADC_CLOCK to RC (DEFINE ACD_CLOCK inoperative on the 16F88x)
ADCON1 = %10000000     ' Right-Justify result in ADRESH:ADRESL registers
ANSEL = %11111001      ' Set AN1-AN2 to digital, AN0-3-4-5-6-7    to analog
ANSELH = %00000000     ' Set AN8 and higher channels to digital operation
TRISA = %11111011      ' Set PORTA to all input except pin 2
trisb = %00000000   ' set all ports B to output
trisc = %00001000   ' set all ports C to output except pin 3
PORTC = %00001000   ' set all portc C to low except pin 3
PORTB = %00000000   ' set all ports B to low


' Project variables 
volt0 var word  'voltage on analog pin 0
volt1 var word  'voltage on analog pin 1
volt2 var word  'voltage on analog pin 2
volt3 var word  'voltage on analog pin 3
volt4 var word  'voltage on analog pin 4
volt5 var word  'voltage on analog pin 5
volt6 var word  'voltage on analog pin 6
volt7 var word  'voltage on analog pin 7
v0 var word     'convert adc to voltage value of pin 0
'v1 var word     'convert adc to voltage value of pin 1
'v2 var word     'convert adc to voltage value of pin 2
v3 var word     'convert adc to voltage value of pin 3
v4 var word     'convert adc to voltage value of pin 4
v5 var word     'convert adc to voltage value of pin 5
v6 var word     'convert adc to voltage value of pin 6
v7 var word     'convert adc to voltage value of pin 7
Hstart var word 'magnetic field start value, from PC
Hstop var word   'magnetic field stop value, from PC
Hstep var word   'magnetic field step value, from PC
Hfield var word   'desired field value, sent to the DAC
nstep var word    'number of steps calculated
meas var word     'integer to determine the measurement state
meas_final var word 'integer to determine if the measurement if final
rs232 var word 
i var word
offset var word
SCK     VAR PORTC.3 'Clock pin of DAC
CS1     VAR PORTC.0 'Chip Select Active low
SDO     VAR PORTC.5 'Data Out pin of DAC
'FREQ    VAR BYTE
'SWITCH  VAR PORTC.6
counter    VAR word    
 databit var word            'series of bits to indicate the state of the DAC
 lbit var databit.byte0     ' correspond to low bit values of databit
 hbit var databit.byte1     ' correspond to high bit values of databit

LEDB0 Var PORTB.0    ' Alias PORTB.0 to LED, to indicate if the measurement is ongoing
LEDB1 var PORTB.1
LEDB2 var PORTB.2    ' alias PORTB.2 to LED, to indicate if the measurement is stopped
LEDB7 var PORTB.7    ' alias PORTB.7 to LED, to indicate if we receive data from PC

lcdout $FE,$01                  ' clear display
Lcdout $FE, $02 
lcdout $FE, 1, "B(mT):"

high PORTB.4 ' We set the OVP of the power supply to 5V, and we control it with a knob    
   
' =========================================================================   
mainloop:
 

' Apply 0 V on power supply             
databit = 12288    ' number 12288 corresponds to 0011 0000 0000 0000
low cs1
SHIFTOUT SDO,SCK,msbfirst,[hbit]
SHIFTOUT SDO,SCK,msbfirst,[lbit]
high cs1
PAUSEus 3000
            
    
 LOW LEDB0            'Put LEDB0 and others to low
 high LEDB2           'Put LEDB2 to high
 
 adcin 3, volt3         ' Read channel 3 
 Adcin 4, volt4         ' Read channel 4 (voltage from teslameter) to adval
 Adcin 5, volt5         ' Read channel 5 (voltage from Sorensen) to adval
 Adcin 6, volt6         ' Read channel 6 (voltage from temperature sensor 1) to adval
 Adcin 7, volt7         ' Read channel 7 (voltage from temperature sensor 2) to adval
                     
 v4= volt4*5           ' Convert analog value of teslameter to mT
 v6 = volt6*500/1024        ' Convert analog value of LM35 to K, with V = 10 mV/deg K, 5000 mV/1024 steps

 'output measured voltage v4 from teslameter and temperature v6 on LCD screen
 lcdout $FE, $80 + 7, "      "             
 lcdout $FE, $80 + 7, #v4
 lcdout $FE, $C0, "               "
 lcdout $FE, $C0, "T(K):"
 lcdout $FE, $C0 + 6, #v6
    
     
 serin PORTA.1,T9600,["A"],rs232     ' Read RS232 value after "A" character from PC
 
 'blink LED7 to indicate that we have received the information from the PC
 high LEDB7
 pause 2000
 low LEDB7
 
 if rs232 = "S" then             ' S means start measurement
    meas = 2
    meas_final = 0
    'high LEDB7
    'pause 4000
    'low LEDB7
    
    'serin PORTA.1,T9600,["F"],rs232     ' Read RS232 value after "F" character
    'SERIN2 PORTA.1,84,[WAIT("F"),DEC4 rs232]
    
    ' receive 4 decimal place values from PC, for the magnetic field start, stop and step
    SERIN2 PORTA.1,84,[DEC4 Hstart]
    SERIN2 PORTA.1,84,[DEC4 Hstop]
    SERIN2 PORTA.1,84,[DEC4 Hstep]
    
    nstep = (Hstart - Hstop)/Hstep
    'serout PORTA.0,T9600,[#rs232]
    'serout PORTA.2,T9600,[#rs232]    
    'serout PORTA.0,T9600,["M", 10]       ' Indicate that we do a measurement via RS 232
    
    'for loop to do all the magnetic field steps    
    for i=1 to nstep
            
        low LEDB2                    ' Put pin LEDB2 to low, to indicat measurement
        high LEDB0                   ' Put pin LEDB0 to high, to indicate measurement
        low LEDB7
        Hfield = Hstart - nstep*Hstep ' actual magnetic field value
        
        'for loop to ramp the magnetic field gradually from 0 to Hstart              
        for counter  = 0 to Hfield        ' ramp the magnetic field
                    
            databit = counter + 12288    ' number 12288 corresponds to 0011 0000 0000 0000
            low cs1
            SHIFTOUT SDO,SCK,msbfirst,[hbit]    ' transmit the 8 high bits first, 0011 xxxx
            SHIFTOUT SDO,SCK,msbfirst,[lbit]    ' transmit the 8 low bits after, xxxx xxxx
            high cs1
            PAUSEus 1000
        next counter
                 
        pause 3000              ' Make sure the magnetic field is stable
        serout PORTA.2,T9600,["M", 10]  'Send "M" to PC by RS232, to indicate measurement is ongoing       
        Adcin 4, volt4         ' Read channel 4 (voltage from teslameter) to adval
        Adcin 5, volt5         ' Read channel 5 (voltage from Sorensen) to adval
        Adcin 6, volt6         ' Read channel 6 (voltage from temperature sensor 1) to adval
        Adcin 7, volt7         ' Read channel 7 (voltage from temperature sensor 2) to adval
                    
        v4= volt4*5            ' Convert analog value of teslameter to mT
        v6 = volt6*500/1024        ' Convert analog value to dec K, with V = 10 mV/deg K, 5000 mV/1024 steps
        'print values on the LCD screen
        lcdout $FE, $80 + 7, "      "             
        lcdout $FE, $80 + 7, #v4
        lcdout $FE, $C0, "               "
        lcdout $FE, $C0, "T(K):"
        lcdout $FE, $C0 + 6, #v6

        serout PORTA.2,T9600,[#volt4, 10]       ' Export value of Teslameter to PC via RS 232
        serout PORTA.2,T9600,[#volt5, 10]       ' Export value of Sorensen to PC via RS 232
        serout PORTA.2,T9600,[#volt6,10]        ' Export value of temperature sensor 1 to PC via RS 232
        serout PORTA.2,T9600,[#volt7,10]        ' Export value of temperature sensor 2 to PC via RS 232 
        
        'counter = 2047 
        
        'for loop to ramp the magnetic field gradually from Hstart to 0        
        for counter  = Hfield to 0         ' decrease the magnetic field
                    
            databit = counter + 12288    ' number 12288 corresponds to 0011 0000 0000 0000
            low cs1
            SHIFTOUT SDO,SCK,msbfirst,[hbit]
            SHIFTOUT SDO,SCK,msbfirst,[lbit]
            high cs1
            PAUSEus 1000
        next counter
                
                  
        serout PORTA.2,T9600,["E", 10]        ' send E to PC to indicate the measurement has finished
        pause 1000
    next i
         
endif
    
 low LEDB0   
 high LEDB2     ' to indicate that the measurement is finished
     

pause 10
              
                
goto mainloop
   
End
